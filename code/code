from tkinter import *
import tkinter.filedialog
from PIL import Image,ImageTk
import cv2 as cv
import dlib
import numpy as np

global inputpath1
global inputpath2
global img_png

PREDICTOR_PATH = 'shape_predictor_68_face_landmarks.dat'
SCALE_FACTOR = 1
FEATHER_AMOUNT = 11
 
FACE_POINTS = list(range(17, 68))
MOUTH_POINTS = list(range(48, 61))
RIGHT_BROW_POINTS = list(range(17, 22))
LEFT_BROW_POINTS = list(range(22, 27))
RIGHT_EYE_POINTS = list(range(36, 42))
LEFT_EYE_POINTS = list(range(42, 48))
NOSE_POINTS = list(range(27, 35))
JAW_POINTS = list(range(0, 17))
 
# Points used to line up the images.
ALIGN_POINTS = (LEFT_BROW_POINTS + RIGHT_EYE_POINTS + LEFT_EYE_POINTS +
                RIGHT_BROW_POINTS + NOSE_POINTS + MOUTH_POINTS)
 
# Points from the second image to overlay on the first. The convex hull of each
# element will be overlaid.
OVERLAY_POINTS = [
    LEFT_EYE_POINTS + RIGHT_EYE_POINTS + LEFT_BROW_POINTS + RIGHT_BROW_POINTS,
    NOSE_POINTS + MOUTH_POINTS,
]
 
TRANSFORM_POINT = [17,26,57]
 
# Amount of blur to use during colour correction, as a fraction of the
# pupillary distance.
COLOUR_CORRECT_BLUR_FRAC = 0.6
 
detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor(PREDICTOR_PATH)
 
 
class TooManyFaces(Exception):
    pass
 
 
class NoFaces(Exception):
    pass
 
 
def get_landmarks(im ,winname = 'debug'):
    rects = detector(im, 1)
 
    if len(rects) > 1:
        raise TooManyFaces
    if len(rects) == 0:
        raise NoFaces
 
    draw = im.copy()
    for _, d in enumerate(rects):
        cv.rectangle(draw,(d.left(),d.top()),(d.right(),d.bottom()),(0,255,0),3)
 
    return np.matrix([[p.x, p.y] for p in predictor(im, rects[0]).parts()])
 
 
def annotate_landmarks(im, landmarks):
    im = im.copy()
    for idx, point in enumerate(landmarks):
        pos = (point[0, 0], point[0, 1])
        cv.putText(im, str(idx), pos,
                    fontFace=cv.FONT_HERSHEY_SCRIPT_SIMPLEX,
                    fontScale=0.4,
                    color=(0, 0, 255))
        cv.circle(im, pos, 3, color=(0, 255, 255))
    return im
 
 
def draw_convex_hull(im, points, color):
    points = cv.convexHull(points) # 得到凸包
    cv.fillConvexPoly(im, points, color=color) # 绘制填充
 
 
def get_face_mask(im, landmarks):
    im = np.zeros(im.shape[:2], dtype=np.float64)
 
    for group in OVERLAY_POINTS:
        draw_convex_hull(im,
                         landmarks[group],
                         color=1)
 
    im = np.array([im, im, im]).transpose((1, 2, 0)) #-> rgb rgbr rgb
 
    im = (cv.GaussianBlur(im, (FEATHER_AMOUNT, FEATHER_AMOUNT), 0) > 0) * 1.0
    im = cv.GaussianBlur(im, (FEATHER_AMOUNT, FEATHER_AMOUNT), 0)
 
    return im
 
 
# 读取图片文件并获取特征点
def read_im_and_landmarks(fname):
    im = cv.imread(fname, cv.IMREAD_COLOR)
 
    im = cv.resize(im, (im.shape[1] * SCALE_FACTOR,
                         im.shape[0] * SCALE_FACTOR))
 
    # 68个特征点
    s = get_landmarks(im,fname) # mat
 
    return im, s
 
 
def warp_im(mask, M, dshape):
    output_im = np.zeros(dshape, dtype=mask.dtype)
    cv.warpAffine(mask,
                   M[:2],
                   (dshape[1], dshape[0]),
                   dst=output_im,
                   borderMode=cv.BORDER_TRANSPARENT,
                   flags=cv.WARP_INVERSE_MAP)
    return output_im
 
 
def getAffineTransform(_srcPoint,_dstPoint):
    srcPoint = _srcPoint.astype(np.float32)
    dstPoint = _dstPoint.astype(np.float32)
    return cv.getAffineTransform(srcPoint,dstPoint)
 
def histMatch_core(src,dst,mask = None):
    srcHist = [0] * 256
    dstHist = [0] * 256
    srcProb = [.0] * 256; # 源图像各个灰度概率
    dstProb = [.0] * 256; # 目标图像各个灰度概率
 
 
    for h in range(src.shape[0]):
         for w in range(src.shape[1]):
             if mask is None:
                 srcHist[int(src[h,w])] += 1
                 dstHist[int(dst[h,w])] += 1
             else:
                 if mask[h,w] > 0:
                     srcHist[int(src[h, w])] += 1
                     dstHist[int(dst[h, w])] += 1
 
 
    resloution = src.shape[0] * src.shape[1]
 
    if mask is not None:
        resloution = 0
        for h in range(mask.shape[0]):
            for w in range(mask.shape[1]):
                if mask[h, w] > 0:
                    resloution += 1
 
    for i in range(256):
        srcProb[i] = srcHist[i] / resloution
        dstProb[i] = dstHist[i] / resloution
 
     # 直方图均衡化
    srcMap = [0] * 256
    dstMap = [0] * 256
 
    # 累积概率
    for i in range(256):
        srcTmp = .0
        dstTmp = .0
        for j in range(i + 1):
            srcTmp += srcProb[j]
            dstTmp += dstProb[j]
 
        srcMapTmp = srcTmp * 255 + .5
        dstMapTmp = dstTmp * 255 + .5
        srcMap[i] = srcMapTmp if srcMapTmp <= 255.0 else 255.0
        dstMap[i] = dstMapTmp if dstMapTmp <= 255.0 else 255.0
 
    matchMap = [0] * 256
    for i in range(256):
        pixel = 0
        pixel_2 = 0
        num = 0 # 可能出现一对多
        cur = int(srcMap[i])
        for j in range(256):
            tmp = int(dstMap[j])
            if cur == tmp:
                pixel += j
                num += 1
            elif cur < tmp: # 概率累计函数 递增
                pixel_2 = j
                break
 
        matchMap[i] = int(pixel / num) if num > 0 else int(pixel_2)
 
    newImg = np.zeros(src.shape[:2], dtype=np.uint8)
    for h in range(src.shape[0]):
        for w in range(src.shape[1]):
            if mask is None:
                newImg[h,w] = matchMap[src[h,w]]
            else:
                if mask[h,w] > 0:
                    newImg[h, w] = matchMap[src[h, w]]
                else:
                    newImg[h, w] = src[h, w]
 
    return newImg

def histMatch(src1,src2,mask = None,dst = None):
 
    sB,sG,sR = cv.split(src1)
    dB,dG,dR = cv.split(src2)
 
    if mask.shape[2] > 1:
        rM,gM,bM = cv.split(mask)
        nB = histMatch_core(sB, dB, rM)
        nG = histMatch_core(sG, dG, gM)
        nR = histMatch_core(sR, dR, bM)
    else:
        nB = histMatch_core(sB,dB,mask)
        nG = histMatch_core(sG,dG,mask)
        nR = histMatch_core(sR,dR,mask)
 
    newImg = cv.merge([nB,nG,nR])
 
    if dst is not None:
        dst = newImg
 
    return newImg
def face_detect_demo() :#分脸函数
    global image,human_face1,human_face2
    imagepath = "trump.jpg"
    image = cv.imread(imagepath)
    gray = cv.cvtColor(image, cv.COLOR_BGR2GRAY)
    face_cascade = cv.CascadeClassifier('haarcascade_frontalface_default.xml')
    faces = face_cascade.detectMultiScale(
        gray,
        scaleFactor=1.2,
        minNeighbors=3,
        minSize=(70, 70),
        maxSize=(160, 160),
        flags=cv.IMREAD_GRAYSCALE
        )
 
    print("检测到{0}个人脸".format(len(faces)))
    middle=int((faces[0][0] + faces[0][2]+faces[1][0])/2)
    print(middle)
    for (x, y, w, h) in faces: 
        #cv.rectangle(image, (x, y), (x + w, y + w), (0, 0, 0), 2) #用矩形框框出人脸范围
        human_face1 = image[0 : 0+480  , 0 : 0+middle]#人脸提取1
        human_face2 = image[0 : 0+480, middle : middle+(1000-middle)]#人脸提取2
        
def choosepic():
    global inputpath1
    path_=tkinter.filedialog.askopenfilename()
    inputpath1=path_
    print(inputpath1)
    #获取图片路径
    path.set(path_)
    img_open=Image.open(e1.get())
    img=ImageTk.PhotoImage(img_open)
    l1.config(image=img)
    l1.image=img#keep a reference
def choosepic1():
    global inputpath2
    path_=tkinter.filedialog.askopenfilename()
    inputpath2=path_
    print(inputpath2)
    #获取图片路径
    path.set(path_)
    img_open=Image.open(e1.get())
    img=ImageTk.PhotoImage(img_open)
    l1l.config(image=img)
    l1l.image=img#keep a reference
def changeface():
    global inputpath1
    global inputpath2
    global img_png
    im1, landmarks1 = read_im_and_landmarks(inputpath1)
    im2, landmarks2 = read_im_and_landmarks(inputpath2)

    M = getAffineTransform(landmarks1[TRANSFORM_POINT],landmarks2[TRANSFORM_POINT])
    mask = get_face_mask(im2, landmarks2) 
    warped_mask = warp_im(mask, M, im1.shape)
    combined_mask = np.max([get_face_mask(im1, landmarks1), warped_mask],axis=0)  
    warped_im2 = warp_im(im2, M, im1.shape)
    histMatch_im = histMatch(warped_im2.astype(np.uint8),im1,mask=combined_mask)
    output_im_hist = im1 * (1.0 - combined_mask) + histMatch_im * combined_mask
    output_im_hist = output_im_hist.astype(np.uint8)
    #cv.imshow('changeface', output_im_hist)
    
    #变换矩阵
    M1 = getAffineTransform(landmarks2[TRANSFORM_POINT],landmarks1[TRANSFORM_POINT])
    mask1 = get_face_mask(im1,landmarks1)
    warped_mask1 = warp_im(mask1, M1, im2.shape)
    combined_mask1 = np.max([get_face_mask(im2, landmarks2), warped_mask1],axis=0) 
    warped_im1 = warp_im(im1, M1, im2.shape)
    histMatch_im1 = histMatch(warped_im1.astype(np.uint8),im2,mask=combined_mask1)
    output_im_hist1 = im2 * (1.0 - combined_mask1) + histMatch_im1 * combined_mask1
    output_im_hist1 = output_im_hist1.astype(np.uint8)
    #cv.imshow('changeface1', output_im_hist1)
    cv.imwrite("./changeface.jpg",output_im_hist) 
    cv.imwrite("./changeface1.jpg",output_im_hist1) 
    #将两张图片重新合并
    left='./changeface.jpg'
    right='./changeface1.jpg'
    img1, img2 = Image.open(left), Image.open(right)
    size1, size2 = img1.size, img2.size
    joint = Image.new('RGB', (size1[0]+size2[0], size1[1]))
    loc1, loc2 = (0, 0), (size1[0], 0)
    joint.paste(img1, loc1)
    joint.paste(img2, loc2)
    joint.save('result.jpg')
    Img = Image.open('changeface.jpg')
    img_png = ImageTk.PhotoImage(Img)
    label_Img = Label(root, image=img_png)
    label_Img.pack()
def ResizeImage(filein, fileout, type):
  img = Image.open(filein)
  width = int(img.width*0.7)
  height = int(img.height*0.7)
  out = img.resize((width, height),Image.ANTIALIAS) #resize image with high-quality
  out.save(fileout, type)
if __name__ == '__main__':
    global img_png
    root=Tk()
    root.title('image_process')
    root.geometry("800x800")
    path=StringVar()
    button1=Button(root,text='输入图片1',command=choosepic)
    button1.pack()
    button1.place(x=20,y=100,width=100)
    e1=Entry(root,state='readonly',text=path)
    e1.pack()
    e1.place(x=1,y=1,width=1)
    button2=Button(root,text='输入图片2',command=choosepic1)
    button2.pack()
    button2.place(x=20,y=350,width=100)
    e2=Entry(root,state='readonly',text=path)
    e2.pack()
    e2.place(x=1,y=1,width=1)
    button3=Button(root,text='changeface',command=changeface)
    button3.pack()
    button3.place(x=20,y=600,width=100)
    l1=Label(root)
    l1.pack()
    l1l=Label(root)
    l1l.pack()
    
    root.mainloop()
